Q) What timezone range are you in:

A) UTC plus 7 or more
B) UTC +3 to UTC +6
C) UTC -2 to UTC +2
D) UTC -8 to UTC -3
E) UTC minus more than 8

Q) Given:

var b = (byte)126;
outer:
for (var n = 1000; n < 1002; n++) {
  for (var j = 4; j >= 0; j--, b++) {
    if (j < 3) break;
    else if (n == 1001) continue outer;
    b++;
  }
}
System.out.printf("b = %d\n", b);

What is the output
A) b = 129
B) b = 130
C) b = -126
D) b = -128
E) an exception is thrown

Q) Given:
class RCToy {
  private static int count = 0;
  private int age;

  public RCToy() {
    //super();
    count++;
  }

  public RCToy(int age) {
    this();
    this.age = age;
    System.out.println(this);
  }

  @Override
  public String toString() {
    return "RCToy for age " + age + ", count " + count;
  }
}

and:
class Robot extends RCToy implements Serializable {
  private int weaponCount;
  // transient int extra;

  public Robot(int weaponCount) {
    super(weaponCount == 0 ? 3 : 10);
    this.weaponCount = weaponCount;
    System.out.println(this);
  }

  @Override
  public String toString() {
    return super.toString() + " a Robot with weaponcount = " + weaponCount;
  }
}

Given an attempt to create and serialize a Robot like this:
    Robot r = new Robot(3);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {
      oos.writeObject(r);
    } catch (IOException ioe) {
      System.out.println("write failed");
    }

What will be output by this code:
    try (ObjectInputStream ois = new ObjectInputStream(
        new ByteArrayInputStream(baos.toByteArray()))) {
      Object obj = ois.readObject();
      System.out.println(obj);
    } catch (Exception ioe) {
      System.out.println("read failed");
    }

A) RCToy for age 0, count 2 a Robot with weaponcount = 0
   RCToy for age 0, count 2 a Robot with weaponcount = 3
   RCToy for age 0, count 2 a Robot with weaponcount = 3
B) RCToy for age 0, count 1 a Robot with weaponcount = 0
   RCToy for age 0, count 1 a Robot with weaponcount = 3
C) RCToy for age 0, count 1 a Robot with weaponcount = 3
   RCToy for age 0, count 1 a Robot with weaponcount = 3
D) RCToy for age 0, count 2 a Robot with weaponcount = 3
E) Compilation fails
F) An exception is thrown during serialization
G) An exception is thrown during deserialization

Q)Given:

    String message = """Hello
            Java 17 World!""";
    System.out.println(message + "XXX");

What is the result?
A)
Hello
Java 17 World!XXX
B)
Hello
    Java 17 World!XXX
C)
Hello
Java 17 World!
XXX
D)
    Hello
        Java 17 World!
XXX
E) Compilation fails

Q)Given:

    String message = """
        Hello
            Java 17 World!""";
    System.out.println(message + "XXX");

What is the result?
A)
Hello
Java 17 World!XXX
B)
Hello
    Java 17 World!XXX
C)
Hello
Java 17 World!
XXX
D)
    Hello
        Java 17 World!
XXX
E) Compilation fails

Q) Given:
    int x = -1;
    System.out.println(x & 5);

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q)
Given:
class X {
  private static int count = 22;
  public static boolean getValue() {
    count++;
    return true;
  }
  public static void main(String...args) {
    boolean b1 = false;
    if (!b1 & getValue()) {
      System.out.println(count);
    } else {
      System.out.println("No " + count);
    }
  }
}

What is the result:
A) Compilation fails
B) No 22
C) No 23
D) 22
E) 23

Q) Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);

B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));

C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));

D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));

E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) Which print true?
Iterable<String> is = List.of("a", "b", "c");
Object obj = is;

A) System.out.println(is instanceof List);
B) System.out.println(obj instanceof List l && l.size() > 2);
C) System.out.println(obj instanceof List<String> ls);
D) System.out.println(is instanceof Collection<? extends CharSequence> cs);
E) System.out.println(is instanceof List<String> ls || ls.size() > 2);

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }

    void length() { System.out.println("doLengthStuff"); }
  }

    Base b = new Sub();
    ((StringBuilder) b) // line n1
        .length();      // line n2

   What is the result?
   A) doLengthStuff
   B) Exception at line n1
   C) Exception at line n2
   D) Compilation failure at line n1
   E) Compilation failure at line n2

 Q)  Given:
   static
   class Base {
     void doBaseStuff() { System.out.println("doBaseStuff"); }
   }

   static
   class Sub extends Base {
     void doBaseStuff() { System.out.println("doSubStuff"); }
     void doOtherStuff() { System.out.println("doOtherStuff"); }
   }

   public static void main(String[] args) {
     Base b = new Sub();
     ((Runnable) b).run();
   }

   What is the result?
   A) doSubStuff
   B) doOtherStuff
   C) doBaseStuff
   D) Exception at runtime
   E) Compilation failure

Q) Given:
  static String doStuff(String s) {
    s = new String("Hello");
    return s;
  }

  public static void main(String[] args) {
    String y = doStuff("Hello");
    // line n1
    System.out.println("y is " + y);
  }
 how many String objects are eligible for GC at line n1
A) 0
B) 1
C) 2
D) 3

Q) Given
  static int doStuff(String s) {
    s = new String("Hello");
    return s.length();
  }

  public static void main(String[] args) {
    int y = doStuff("Hello");
    // line n1
  }
 how many String objects are eligible for GC at line n1
A) 0
B) 1
C) 2
D) 3

Q) Given:

    Object obj = "Hello";
    switch(obj) { // line n1
      case "Hello" -> System.out.println(obj); // line n2
      default -> System.out.println("something else");
    }

What is the result
A) Compilation fails because of line n1
B) Compilation fails because of line n2
C) Exception at runtime
D) Hello
E) Hello
   something else

Q) Given:
    String s = "Hello";
    switch (s) {
      case "Hello" ->
          System.out.print("Bonjour "); // line n1
          System.out.print("Guten Tag ");
      default -> System.out.print("Bye");
    }

Which is true?
A) The code prints: Bonjour Guten Tag Bye
B) The code prints: Bonjour Guten Tag
C) If line n1 is removed the code prints: Guten Tag Bye
D) If line n1 is removed the code prints: Guten Tag
E) The code fails to compile

Q) Given
    int x = 1;
    // line n1
    switch(x) {
      case 1: LocalDate.of(2023, x, 1);
      default: LocalDate.of(2022, 12, 1);
    };

Which are true?
A) The code compiles
B) The code throws an exception at runtime
C) The code compiles if line n1 is replaced with
   var d =
D) The code compiles if the word "yield" is inserted
   after the colon in both the case and default
E) The code compiles if the changes of both C and D
   are applied

Q) Given:
interface GameDescriptor { String gameType(); }
abstract class GD { public abstract String gameType(); }
enum Suit {
  HEARTS, DIAMONDS, CLUBS, SPADES;
  // line n1
  boolean isTrumps() { return this == HEARTS; }
}

Which is/are true?
A) isTrumps is implicitly static
B) compilation fails, but marking isTrumps static corrects the problem
C) isTrumps can be marked final
D) if it's necessary to prevent isTrumps being overridden,
   it should be marked final
E) this can be added at line n1:
   private static Suit trumps = HEARTS;
F) Suit can be modified to implement the GameDescriptor interface
   if this code is added at line n1:
   public String gameType() { return "Cards"; }
G) Suit can be modified to extend the GD class if this code is
   added at line n1:
   public String gameType() { return "Cards"; }
H) none of the above

Q) Given:
enum Day {
  MONDAY(1), TUESDAY;
// line n1
}
and:
System.out.println(Day.MONDAY)

Which is/are true?
A) The code compiles as is
B) If the following is added at line n1, the code compiles:
   public Day(int d) {}
C) If the following is added at line n1, the code compiles:
   Day(int d) {}
D) If the following is added at line n1, the code compiles:
   Day(int d) {} Day() {}
E) If the MONDAY(1), is changed to MONDAY, the code compiles:

Q) Given
  class Parent {
    static int x = 97;
  }
  class Thing extends Parent {
    int x = 99;

    static void showIt() {
      int x = 98;
      System.out.println("x is " + Thing.x);
    }
  }

What is the effect of:
     Thing.showIt();

  A) Compilation fails
  B) Exception
  C) x is 99
  D) x is 98
  E) x is 97

Q) Given:
  public static void funct(int x) {
    x = x + 1;
  }

and:
    int x = 99;
    funct(x);
    System.out.println(x);

  What is the result?
  A) 99
  B) 100
  C) An error

Q)Given:
  public static void q12A(StringBuilder x) {
    x.append(" world");
  }

and:
    StringBuilder x = new StringBuilder("Hello");
    q12A(x);
    System.out.println(x);

  What is the result?
  A) Hello
  B) Hello world
  C)  world
  D) An error

Q) Given:
    public static void q14A(Integer x) {
      x = x + 1;
    }

and:
    public static void main(String[] args) {
      Integer x = 99;
      q14A(x);
      System.out.println(x);
    }

    What is the result?
    A) 99
    B) 100
    C) An error

Q)
  public static void q13A(int[] x) {
    x[0] = x[0] + 1;
  }

and:
    int x[] = {99};
    q13A(x);
    System.out.println(x[0]);

  What is the result?
  A) 99
  B) 100
  C) An error

Q) Given:
   var res = Stream.generate(() -> 1)
       .limit(1000)
       .parallel()
       .collect(1, (a, b) -> a + b, (a, b) -> a + b);

   System.out.println(res);

What is the result
A) 1000
B) 1001
C) unpredictable
D) an exception is thrown
E) compilation fails

Q) Given:
    record Customer(String name, int credit) {}
and:
    var result = Stream.of(new Customer("Fred", 100))
        .collect(Collectors.groupingBy(c -> c.name(),
            Collectors.counting()));

What is the type of result?
A) List<Customer>
B) Map<Customer, Integer>
C) Stream<Customer>
D) Map<String, Integer>
E) Map<String, Long>

Q) Given
class AC4 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    throw new SQLException();
  }
}
And:
public static void main(String[] args) throws Throwable {
    try (
        var one = new AC4();
        var two = new AC4();
        ){
      throw new FileNotFoundException();
    }
  }

Which are true?
A) Compilation fails
B) A FileNotFoundException is thrown to the caller
C) An SQLException is thrown to the caller
D) close methods of resources "one" and "two" are called
E) close methods of resources "one" and "two" are not both called

Q) Given
    void doStuff() throws SQLException {};
    void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() /*...insert here...*/ {
    try {
      doStuff();
      doStuff2();
    } catch (SQLException | FileNotFoundException e) {
      throw e;
    }
  }

What is best at "...insert here..."?
A) throws Exception
B) throws SQLException
C) throws FileNotFoundException
D) throws FileNotFoundException, SQLException
E) nothing is needed, compilation succeeds as is

Q) Given:
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E
And a call to:
    doStuff(1, 2);

What happens if method A is deleted?
A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails

Q) Given
  void doStuff(int ... x) {} // method A
  void doStuff(Number x, Integer y) {} // method B
  void doStuff(Integer x, Number y) {} // method C

and a call:
    doStuff(1, 2);

What is the result?
A) Method A is invoked
B) Method B is invoked
C) Method C is invoked
D) Compilation fails

Q) Which are legal:

A) class X {
     var x = 99;
   }

B) void doStuff(var x) { }

C) void doStuff() {
     var x;
     x = 100;
   }

D) void doStuff() {
     var x = 100;
   }

E) void doStuff() {
     var x = null;
   }

Q) Which are legal:

A) var [] x = { 1,2,3 };

B) var x = new int[]{ 1,2,3 };

C) var x = 10, y = 100;

D)  var x = true ? "99" : 99;

E) var var = "var";

F) for (var x : someList) {}

G) try {
     if (Math.random() > 0.5) throw new SQLException();
   } catch (var anException) {}

Q) Given:
  interface StudentCriterion {
    boolean test(Student s);
  }

and:
  class Student {
    public int getGpa() { return 0; }
    public List<String> getCourses() { return null; }
  }

Which are legal (individually):
    A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
    B) StudentCriterion sc = s -> { s.getGpa() > 3 };
    C) Object sc = s -> {return s.getGpa() > 3;};
    D) StudentCriterion sc = (s) -> s.getGpa() > 3;
    E) StudentCriterion sc = s -> s.getCourses().size();

Q) Given:
interface Int1 {
  default void doStuff() {
    System.out.println("Int1.doStuff()");
  }
}
class Cl1 implements Int1 {
  void doStuff() {
    System.out.println("Cl1.doStuff");
  }
}

What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
interface IntA {
  default void doStuff() {
    System.out.println("IntA.doStuff()");
  }
}

interface IntB {
  default void doStuff() {
    System.out.println("IntB.doStuff()");
  }
}

class ClA implements IntA, IntB {
}

What is the result of a call:
    new ClA().doStuff();

A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) ClA.doStuff()

